
/************************************************************/
/*    NAME: Kat Fung                                              */
/*    ORGN: MIT, Cambridge MA                               */
/*    FILE: GenPath.cpp                                        */
/*    DATE: April 8, 2021                            */
/************************************************************/

#include <iterator>
#include "MBUtils.h"
#include "ACTable.h"
#include "GenPath.h"
#include "XYSegList.h"
#include "XYPoint.h"
#include <cmath>
#include <iostream>
#include <vector>
#include <iterator>
#include <string>
#include <stdlib.h>

using namespace std;

//---------------------------------------------------------
// Constructor

GenPath::GenPath()
{
  m_min = 100000; // initizalize min dist
}

//---------------------------------------------------------
// Destructor

GenPath::~GenPath()
{
}

//---------------------------------------------------------
// Procedure: OnNewMail

bool GenPath::OnNewMail(MOOSMSG_LIST &NewMail)
{
  AppCastingMOOSApp::OnNewMail(NewMail);

  MOOSMSG_LIST::iterator p;
  for (p = NewMail.begin(); p != NewMail.end(); p++)
  {
    CMOOSMsg &msg = *p;
    string key = msg.GetKey();
    string sval = msg.GetString();

#if 0 // Keep these around just for template
    string comm  = msg.GetCommunity();
    double dval  = msg.GetDouble();
    string sval  = msg.GetString(); 
    string msrc  = msg.GetSource();
    double mtime = msg.GetTime();
    bool   mdbl  = msg.IsDouble();
    bool   mstr  = msg.IsString();
#endif

    if (key == "FOO")
      cout << "great!";

    else if (key == "VISIT_POINT")
    {
      // the first entry of tsppoints is the startpos

      m_tsppoints.push_back(sval); // these are strings, initial order
      cout << "Added Visit Point to List" << endl;

      // IT JUST KEEPS GROWING, HOW TO LIMIT SIZE?
      cout << "Size is" << m_tsppoints.size();
      //cout << "sval is:" << sval;

      ConvertPoint(sval);
      cout << "Converting all Visit Points" << endl;
      // this should give us all converted points

      // Run Function FindShortestPath
      Notify("FINDPATH_DEBUG", "Mail Complete, running FSP");
      FindShortestPath();
      //cout << "Ran FindShortestPath function" << endl;
    }
    else if (key != "APPCAST_REQ") // handled by AppCastingMOOSApp
      reportRunWarning("Unhandled Mail: " + key);
  }

  return (true);
}

//---------------------------------------------------------
// Procedure: ConvertPoint
bool GenPath::ConvertPoint(string msg)
{
  // vector<string>::iterator jj;
  // for (jj = m_tsppoints.begin(); jj != m_tsppoints.end(); jj++)
  // {
  //   string msg = *jj;
  if (msg == "firstpoint" || msg == "lastpoint")
  {
    // Cool, do nothing
    return (true);
  }

  // This is a list of STRINGS not INTS

  string pointstring = msg; // the whole "x=num, y=num, id=num"

  // use biteStringX to break up around commas
  // saves the front half as xstring, pointstring is now "y=num, id=num"
  string xstring = biteStringX(pointstring, ','); // pointstring left with "y=num, id=num"
  string ystring = biteStringX(pointstring, ','); // pointstring left with "id=num"
  string idstring = pointstring;                  // set the last piece to idstring

  // use bitStringX to break up around = sign
  string xstr = biteStringX(xstring, '=');   //xstring now contains the num
  string ystr = biteStringX(ystring, '=');   //ystring now contains the num
  string idstr = biteStringX(idstring, '='); //idstring now contains the num

  // turn the strings into doubles, variables defined above
  //cout<<xstring<<endl;
  //cout<<ystring<<endl;
  double x = atof(xstring.c_str());
  double y = atof(ystring.c_str());
  int idnum = atof(idstring.c_str());
  cout << "converted xstring and ystring to doubles" << endl;
  string label = idstring; // he gets to stay a string

  XYPoint point(x, y);
  point.set_label(label);

  // Save that x,y in an unordered list of xy points
  m_xypointsort.push_back(point);
  cout << "Size of XYPointsort is: " << m_xypointsort.size();

  //}
  return (true);
};

//---------------------------------------------------------
// Procedure: FindShortestPath

bool GenPath::FindShortestPath()
{
  // The purpose of this block is to generate a path of least resistance
  // The purpose of this block is to generate a path of least resistance
 cout << "Running FindShortestPath" << endl;
 vector<XYPoint>::iterator p, n, eliminate;
 for (p = m_xypointsort.begin(); p != m_xypointsort.end();)
 {
   Notify("FINDPATH_DEBUG","inside first loop");
   XYPoint point1 = *p;
   string pointstring = point1.get_spec();
   double x1 = point1.x();
   double y1 = point1.y();
   bool loopdone;
  
   // if (p == m_xypointsort.begin()) // we're at the starting point
   // {
   //   // save first point and remove
   //   m_seglist.add_vertex(x1, y1);
   //   p = m_xypointsort.erase(p); // remove from iteration list
   // }
 
   // else
   // {
     Notify("FINDPATH_DEBUG2","inside second loop");
     for (n = m_xypointsort.begin(); n != m_xypointsort.end(); n++)
     {
       XYPoint point2 = *n;
       string pointstring = point2.get_spec();
       double x2 = point2.x();
       double y2 = point2.y();
 
       double distance = DistanceCalc(x1, x2, y1, y2);
       Notify("DISTANCE_DEBUG",distance);
       bool closer_point_found;
 
       if (distance >= m_min)
       {
         closer_point_found = false;
         cout << "Distance not smaller yet" << endl;
       }
 
       else if (distance <= m_min) // if the dist calculated is smaller than current min
       {
         cout << "Smaller distance found" << endl;
         m_min = distance; // reset the m_min
         // save these points as the next points
         m_xnext = x2;  //save current x2
         m_ynext = y2;  // save current y2s
         eliminate = n; // save the line to be exited
         closer_point_found = true;
       }
       loopdone = true;
     }
 }

  vector<XYPoint>::iterator p, n, eliminate;
  for (p = m_xypointsort.begin(); p != m_xypointsort.end();)
  {
    Notify("FINDPATH_DEBUG", "inside first loop");

    XYPoint point1 = *p;
    double x1 = point1.x();
    double y1 = point1.y();
    bool loopdone;

    m_seglist.add_vertex(x1, y1);

    for (n = m_xypointsort.begin()+1; n != m_xypointsort.end(); n++)
    {

      XYPoint point2 = *n;
      double x2 = point2.x();
      double y2 = point2.y();
      bool loopdone;

      double distance = DistanceCalc(x1, x2, y1, y2);

      Notify("DISTANCE_DEBUG_END", distance);
      // Now determine the next point
      if (distance <= m_min)
      {
        //save the position of the smallest n
        eliminate = n;
        // save the xycoords of smallest distance
        savepoint = *n;
        // reset the min comparison distance

        m_min = distance;
        Notify("DISTANCE_DEBUG_START", "reset min distance");
      }
      // add that lowest point into the sorted list
    } // exit for loop to find distance


// AM I DOING THIS ERASING RIGHT, WHY DOES IT CRASH
    //erase the old p so we don't test it again
    //m_xypointsort.erase(p);
    // advance p to the iterator eliminate
    p = m_xypointsort.erase(eliminate);

    Notify("DISTANCE_DEBUG_END", "reset p to eliminate as next point");
  } //end of for loop going through all points

  // vector<XYPoint>::iterator final;
  // for (final = m_sorted.begin(); final != m_sorted.end();final++)
  // {
  //   XYPoint point = *final;
  //   double x = point.x();
  //   double y = point.y();
  //   m_seglist.add_vertex(x, y);
  // }

  #endif

  // Change to strings
  string updatestring = "points = ";
  updatestring += m_seglist.get_spec();
  Notify("FINDPATH_DEBUG2", "Notified TSP_Updates");

  // Notify TSP_UPDATES
  Notify("TSP_UPDATES", updatestring);

  return (true);

}; //end of class

//---------------------------------------------------------
// Procedure: Distance
double GenPath::DistanceCalc(double x1, double x2, double y1, double y2)
{
  double xdist = pow(x2 - x1, 2);
  double ydist = pow(y2 - y1, 2);
  double dist = sqrt(xdist + ydist);
  return (dist);
};

//---------------------------------------------------------
// Procedure: OnConnectToServer

bool GenPath::OnConnectToServer()
{
  registerVariables();
  return (true);
}

//---------------------------------------------------------
// Procedure: Iterate()
//            happens AppTick times per second

bool GenPath::Iterate()
{
  AppCastingMOOSApp::Iterate();
  // Do your thing here!

  AppCastingMOOSApp::PostReport();
  return (true);
}

//---------------------------------------------------------
// Procedure: OnStartUp()
//            happens before connection is open

bool GenPath::OnStartUp()
{
  AppCastingMOOSApp::OnStartUp();

  STRING_LIST sParams;
  m_MissionReader.EnableVerbatimQuoting(false);
  if (!m_MissionReader.GetConfiguration(GetAppName(), sParams))
    reportConfigWarning("No config block found for " + GetAppName());

  STRING_LIST::iterator p;
  for (p = sParams.begin(); p != sParams.end(); p++)
  {
    string orig = *p;
    string line = *p;
    string param = tolower(biteStringX(line, '='));
    string value = line;

    bool handled = false;
    if (param == "foo")
    {
      handled = true;
    }
    else if (param == "bar")
    {
      handled = true;
    }
    else if (param == "start_pos")
    {
      // WHY IS THE OTHER VEHICLE GOING HERE (0,0)
      m_startpos = value;                       //save the start position
      string xstring = biteStringX(value, ','); // value keeps the y value
      double x = atof(xstring.c_str());
      double y = atof(value.c_str());
      XYPoint point(x, y);
      m_xypointsort.push_back(point);
      m_seglist.add_vertex(x, y);

      handled = true;
    }

    if (!handled)
      reportUnhandledConfigWarning(orig);
  }

  registerVariables();
  return (true);
}

//---------------------------------------------------------
// Procedure: registerVariables

void GenPath::registerVariables()
{
  AppCastingMOOSApp::RegisterVariables();
  // Register("FOOBAR", 0);
  // There should be one generated for EACH vehicle
  Register("VISIT_POINT", 0);
}

//------------------------------------------------------------
// Procedure: buildReport()

bool GenPath::buildReport()
{
  m_msgs << "============================================" << endl;
  m_msgs << "File: GenPath.cpp                                      " << endl;
  m_msgs << "============================================" << endl;

  ACTable actab(4);
  actab << "Trying to generate a path";
  actab.addHeaderLines();
  actab << "Path Generated!";
  m_msgs << actab.getFormattedString();

  return (true);
}
