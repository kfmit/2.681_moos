/************************************************************/
/*    NAME: Kat Fung                                              */
/*    ORGN: MIT, Cambridge MA                               */
/*    FILE: GenPath.cpp                                        */
/*    DATE: April 8, 2021                            */
/************************************************************/

#include <iterator>
#include "MBUtils.h"
#include "ACTable.h"
#include "GenPath.h"
#include "XYSegList.h"
#include "XYPoint.h"
#include <cmath>
#include <iostream>
#include <vector>
#include <iterator>
#include <string>
#include <stdlib.h>

using namespace std;

//---------------------------------------------------------
// Constructor

GenPath::GenPath()
{
  m_min = 100000; // initizalize min dist
}

//---------------------------------------------------------
// Destructor

GenPath::~GenPath()
{
}

//---------------------------------------------------------
// Procedure: OnNewMail

bool GenPath::OnNewMail(MOOSMSG_LIST &NewMail)
{
  AppCastingMOOSApp::OnNewMail(NewMail);

  MOOSMSG_LIST::iterator p;
  for(p=NewMail.begin(); p!=NewMail.end(); p++) {
    CMOOSMsg &msg = *p;
    string key    = msg.GetKey();
    string sval  = msg.GetString(); 

#if 0 // Keep these around just for template
    string comm  = msg.GetCommunity();
    double dval  = msg.GetDouble();
    string sval  = msg.GetString(); 
    string msrc  = msg.GetSource();
    double mtime = msg.GetTime();
    bool   mdbl  = msg.IsDouble();
    bool   mstr  = msg.IsString();
#endif

     if(key == "FOO") 
       cout << "great!";

     else if(key == "VISIT_POINT"){
       m_tsppoints.push_back(sval); // these are strings, initial order
       cout << "Added Visit Point to List" << endl;

       // This function will convert the string to an xypoint
       ConvertPoint(sval);
       cout << "Sent Visit Point to ConvertPoint" << endl;
       // and should also run the findshortestpath function

       // Run Function FindShortestPath
       FindShortestPath();
       cout<< "Ran FindShortestPath function" <<endl;  
       
      }


     else if(key != "APPCAST_REQ") // handled by AppCastingMOOSApp
       reportRunWarning("Unhandled Mail: " + key);
   }
	
   return(true);
}

//---------------------------------------------------------
// Procedure: ConvertPoint
bool GenPath::ConvertPoint(string msg){
  if (msg == "firstpoint" || msg == "lastpoint"){
    // Cool, do nothing
    return(true);
  }

  // This is a list of STRINGS not INTS
  // m_pointslist.push_back(sval);
  // ["x=XX, y=YY, label=@@", "x=XX, y=YY, label=@@"]
  // [XYPoint(XX,YY,@@),XYPoint(XX,YY,@@),XYPoint(XX,YY,@@)]

  string pointstring = msg;                       // the whole "x=num, y=num, id=num"
  // cout << pointstring << endl;
  // use biteStringX to break up around commas
  // saves the front half as xstring, pointstring is now "y=num, id=num"
  string xstring = biteStringX(pointstring, ','); // pointstring left with "y=num, id=num"
  string ystring = biteStringX(pointstring, ','); // pointstring left with "id=num"
  string idstring = pointstring;                  // set the last piece to idstring

  // use bitStringX to break up around = sign
  string xstr = biteStringX(xstring, '=');        //xstring now contains the num
  string ystr = biteStringX(ystring, '=');        //ystring now contains the num
  string idstr = biteStringX(idstring, '=');        //idstring now contains the num

  // turn the strings into doubles, variables defined above
  //cout<<xstring<<endl;
  //cout<<ystring<<endl;
  double x     = atof(xstring.c_str());
  double y     = atof(ystring.c_str());
  int idnum  =atof(idstring.c_str());
  cout<<"converted xstring and ystring to doubles"<<endl;
  string label = idstring;      // he gets to stay a string

  XYPoint point(x, y);
  point.set_label(label);

// Save that x,y in an unordered list of xy points
  m_xypointsort.push_back(point);
     
   return(true);
};

//---------------------------------------------------------
// Procedure: FindShortestPath

bool GenPath::FindShortestPath(){
  // The purpose of this block is to generate a path of least resistance
  

  if(m_xypointsort.size()==100)
  {
    cout<<"100 points received, calculating"<<endl;
    vector<XYPoint>::iterator p;
    for(p=m_xypointsort.begin(); p!=m_xypointsort.end(); p++)
    {
      XYPoint point1 = *p;
      string pointstring = point1.get_spec();
      double x1 = point1.x();
      double y1 = point1.y();
      
      if(p==m_xypointsort.begin()) // we're at the starting point
      {
        // save first point and remove
        m_seglist.add_vertex(x1,y1);
        p = m_xypointsort.erase(p); // remove from iteration list
      }

      else{
      // move up one and find smallest distance
      vector<XYPoint>::iterator n;
      for(n=m_xypointsort.begin(); n!=m_xypointsort.end(); n++)
      {
      XYPoint point2 = *n;
      string pointstring = point2.get_spec();
      double x2 = point2.x();
      double y2 = point2.y();

      double distance = DistanceCalc(x1,x2,y1,y2);

      if(distance<=m_min)
        {
          m_min = distance;
          // save these points as the next points
          m_xnext = x2;
          m_ynext = y2;
          XYPoint eliminate = *n;   // save the line to be exited
        }
      } // exiting for loop, xnext and ynext should be saved

      // Output to seglist
      m_seglist.add_vertex(m_xnext,m_ynext);    
      } // end of else
    }
  // Change to strings
  string updatestring = "points = ";
  updatestring += m_seglist.get_spec();

  // Notify TSP_UPDATES
  Notify("TSP_UPDATES", updatestring);

  return(true);
  }

  else{
    return(false);
    cout<<"Not all points received yet"<< endl;
  }

}; //end of class
//---------------------------------------------------------
// Procedure: Distance
double GenPath::DistanceCalc(double x1, double x2, double y1, double y2)
{
double xdist = pow(x2-x1,2);
double ydist = pow(y2-y1,2);
double dist = sqrt(xdist+ydist);
return(dist);
};



//---------------------------------------------------------
// Procedure: OnConnectToServer

bool GenPath::OnConnectToServer()
{
   registerVariables();
   return(true);
}


//---------------------------------------------------------
// Procedure: Iterate()
//            happens AppTick times per second

bool GenPath::Iterate()
{
  AppCastingMOOSApp::Iterate();
  // Do your thing here!


  AppCastingMOOSApp::PostReport();
  return(true);
}

//---------------------------------------------------------
// Procedure: OnStartUp()
//            happens before connection is open

bool GenPath::OnStartUp()
{
  AppCastingMOOSApp::OnStartUp();

  STRING_LIST sParams;
  m_MissionReader.EnableVerbatimQuoting(false);
  if(!m_MissionReader.GetConfiguration(GetAppName(), sParams))
    reportConfigWarning("No config block found for " + GetAppName());

  STRING_LIST::iterator p;
  for(p=sParams.begin(); p!=sParams.end(); p++) {
    string orig  = *p;
    string line  = *p;
    string param = tolower(biteStringX(line, '='));
    string value = line;

    bool handled = false;
    if(param == "foo") {
      handled = true;
    }
    else if(param == "bar") {
      handled = true;
    }
    else if(param == "start_pos") {
      // WHY IS THE OTHER VEHICLE GOING HERE
     m_startpos = value; //save the start position
     m_tsppoints.push_back(value);  // make start pos the first entry in tsppoints
     ConvertPoint(value);   // converts to xypoint, top of list
     handled = true;
    }

    if(!handled)
      reportUnhandledConfigWarning(orig);

  }
  
  registerVariables();	
  return(true);
}

//---------------------------------------------------------
// Procedure: registerVariables

void GenPath::registerVariables()
{
  AppCastingMOOSApp::RegisterVariables();
  // Register("FOOBAR", 0);
  // There should be one generated for EACH vehicle
  Register("VISIT_POINT",0);
  
}


//------------------------------------------------------------
// Procedure: buildReport()

bool GenPath::buildReport() 
{
  m_msgs << "============================================" << endl;
  m_msgs << "File: GenPath.cpp                                      " << endl;
  m_msgs << "============================================" << endl;

  ACTable actab(4);
  actab << "Hopefully we have a path";
  actab.addHeaderLines();
  actab << "Path Generated!";
  m_msgs << actab.getFormattedString();

  return(true);
}




