/************************************************************/
/*    NAME: Kat Fung                                              */
/*    ORGN: MIT, Cambridge MA                               */
/*    FILE: GenPath.cpp                                        */
/*    DATE: April 8, 2021                            */
/************************************************************/

#include <iterator>
#include "MBUtils.h"
#include "ACTable.h"
#include "GenPath.h"
#include "XYSegList.h"
#include "XYPoint.h"
#include <cmath>
#include <vector>

using namespace std;

//---------------------------------------------------------
// Constructor

GenPath::GenPath()
{
}

//---------------------------------------------------------
// Destructor

GenPath::~GenPath()
{
}

//---------------------------------------------------------
// Procedure: OnNewMail

bool GenPath::OnNewMail(MOOSMSG_LIST &NewMail)
{
  AppCastingMOOSApp::OnNewMail(NewMail);

  MOOSMSG_LIST::iterator p;
  for(p=NewMail.begin(); p!=NewMail.end(); p++) {
    CMOOSMsg &msg = *p;
    string key    = msg.GetKey();
    string sval  = msg.GetString(); 

#if 0 // Keep these around just for template
    string comm  = msg.GetCommunity();
    double dval  = msg.GetDouble();
    string sval  = msg.GetString(); 
    string msrc  = msg.GetSource();
    double mtime = msg.GetTime();
    bool   mdbl  = msg.IsDouble();
    bool   mstr  = msg.IsString();
#endif

     if(key == "FOO") 
       cout << "great!";

     else if(key == "VISIT_POINT"){
       m_tsppoints.push_back(sval); // these are strings, initial order
       cout << "Added Visit Point to List" << endl;

       // This function will convert the string to an xypoint
       ConvertPoint(sval);
       cout << "Sent Visit Point to ConvertPoint" << endl;
       // and should also run the findshortestpath function
       
      }


     else if(key != "APPCAST_REQ") // handled by AppCastingMOOSApp
       reportRunWarning("Unhandled Mail: " + key);
   }
	
   return(true);
}

//---------------------------------------------------------
// Procedure: ConvertPoint
bool GenPath::ConvertPoint(string msg){
  if (msg == "firstpoint" || msg == "lastpoint"){
    // Cool, do nothing
    return(true);
  }
  
  string pointstring = msg;

    // Lets convert and save   
  string xstring = biteStringX(pointstring, ','); // pointstring left with "y=num, id=num"
  string ystring = biteStringX(pointstring, ','); // pointstring left with "id=num"
  string idstring = pointstring;                  // set the last piece to idstring

  // use bitStringX to break up around = sign
  string xstr = biteStringX(xstring, '=');        //xstring now contains the num
  string ystr = biteStringX(ystring, '=');        //ystring now contains the num
  string idstr = biteStringX(idstring, '=');        //idstring now contains the num

  // turn the strings into doubles, variables defined above
  cout<<xstring<<endl;
  cout<<ystring<<endl;
  double x     = stod(xstring.c_str());
  double y     = stod(ystring.c_str());
  XYPoint point(x, y);

// Save that x,y in an unordered list of xy points
  m_xypointsort.push_back(point);
     
   // Run Function FindShortestPath
   FindShortestPath(point);  
}

//---------------------------------------------------------
// Procedure: FindShortestPath

bool GenPath::FindShortestPath(XYPoint somepoint){
  // The purpose of this block is to generate a path of least resistance
  // First, iterate through the list of xypoints to create path
  // vector<XYPoint>::iterator p;
  // for(p=m_xypointsort.begin(); p!=m_xypointsort.end(); p++){

  //   // Calculate the distance between this point and next on list

  //   // If distance A < Distance B, distance A becomes min

  //   // If distance A > Distance B, distance B becomes min

  //   // Repeat against all points to get absolute minimum

    // Add that point to the seglist

  // }
  double x = somepoint.x();
  double y = somepoint.y();

  // Output to seglist
  m_seglist.add_vertex(x,y);

  // Change to strings
  string updatestring = "points = ";
  updatestring += m_seglist.get_spec();

  // Notify TSP_UPDATES
  Notify("TSP_UPDATES", updatestring);
  
  return(true);
};
//---------------------------------------------------------


//---------------------------------------------------------
// Procedure: OnConnectToServer

bool GenPath::OnConnectToServer()
{
   registerVariables();
   return(true);
}


//---------------------------------------------------------
// Procedure: Iterate()
//            happens AppTick times per second

bool GenPath::Iterate()
{
  AppCastingMOOSApp::Iterate();
  // Do your thing here!


  AppCastingMOOSApp::PostReport();
  return(true);
}

//---------------------------------------------------------
// Procedure: OnStartUp()
//            happens before connection is open

bool GenPath::OnStartUp()
{
  AppCastingMOOSApp::OnStartUp();

  STRING_LIST sParams;
  m_MissionReader.EnableVerbatimQuoting(false);
  if(!m_MissionReader.GetConfiguration(GetAppName(), sParams))
    reportConfigWarning("No config block found for " + GetAppName());

  STRING_LIST::iterator p;
  for(p=sParams.begin(); p!=sParams.end(); p++) {
    string orig  = *p;
    string line  = *p;
    string param = tolower(biteStringX(line, '='));
    string value = line;

    bool handled = false;
    if(param == "foo") {
      handled = true;
    }
    else if(param == "bar") {
      handled = true;
    }
    else if(param == "start_pos") {
      // Work with vehicle 1
     m_startpos = value; //save the start position
     m_tsppoints.push_back(value);  // make start pos the first entry in tsppoints
     ConvertPoint(value);   // converts to xypoint, top of list
     handled = true;
    }

    if(!handled)
      reportUnhandledConfigWarning(orig);

  }
  
  registerVariables();	
  return(true);
}

//---------------------------------------------------------
// Procedure: registerVariables

void GenPath::registerVariables()
{
  AppCastingMOOSApp::RegisterVariables();
  // Register("FOOBAR", 0);
  // There should be one generated for EACH vehicle
  Register("VISIT_POINT",0);
  
}


//------------------------------------------------------------
// Procedure: buildReport()

bool GenPath::buildReport() 
{
  m_msgs << "============================================" << endl;
  m_msgs << "File: GenPath.cpp                                      " << endl;
  m_msgs << "============================================" << endl;

  ACTable actab(4);
  actab << "Hopefully we have a path";
  actab.addHeaderLines();
  actab << "Path Generated!";
  m_msgs << actab.getFormattedString();

  return(true);
}




